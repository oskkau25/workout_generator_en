name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  enhanced-testing:
    name: üöÄ Enhanced Automated Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üß™ Run Enhanced Test Pipeline
      run: |
        python ci-cd/automated_test_pipeline.py --enhanced
        
    - name: üìä Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          reports/test_results/automated_test_results.json
          reports/test_results/performance_report.json
          reports/logs/test_pipeline.log
          
    - name: üìà Generate test summary
      run: |
        echo "## üß™ Enhanced Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "reports/test_results/automated_test_results.json" ]; then
          echo "### üìä Overall Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: $(jq -r '.overall_status' reports/test_results/automated_test_results.json)" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: $(jq -r '.summary.success_rate' reports/test_results/automated_test_results.json)%" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: $(jq -r '.summary.total_tests' reports/test_results/automated_test_results.json)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîí Security & Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Score**: $(jq -r '.summary.security_score' reports/test_results/automated_test_results.json)/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Accessibility Score**: $(jq -r '.summary.accessibility_score' reports/test_results/automated_test_results.json)/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Score**: $(jq -r '.summary.performance_metrics.performance_score' reports/test_results/automated_test_results.json)/100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üí° Recommendations" >> $GITHUB_STEP_SUMMARY
          jq -r '.summary.recommendations[]' reports/test_results/automated_test_results.json | while read line; do
            echo "- $line" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
  security-scan:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    needs: enhanced-testing
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: üîç Run security scan
      run: |
        echo "Running security scan..."
        bandit -r . -f json -o bandit-report.json || true
        
    - name: üìä Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json
        
  performance-analysis:
    name: ‚ö° Performance Analysis
    runs-on: ubuntu-latest
    needs: enhanced-testing
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install performance tools
      run: |
        python -m pip install --upgrade pip
        pip install psutil memory-profiler
        
    - name: üìä Analyze bundle sizes
      run: |
        echo "## üì¶ Bundle Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "src/script.js" ]; then
          JS_SIZE=$(wc -c < src/script.js)
          JS_SIZE_KB=$((JS_SIZE / 1024))
          echo "- **JavaScript**: ${JS_SIZE_KB}KB" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "src/index.html" ]; then
          HTML_SIZE=$(wc -c < src/index.html)
          HTML_SIZE_KB=$((HTML_SIZE / 1024))
          echo "- **HTML**: ${HTML_SIZE_KB}KB" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "src/dashboard.html" ]; then
          DASH_SIZE=$(wc -c < src/dashboard.html)
          DASH_SIZE_KB=$((DASH_SIZE / 1024))
          echo "- **Dashboard**: ${DASH_SIZE_KB}KB" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: üìà Upload performance data
      uses: actions/upload-artifact@v3
      with:
        name: performance-data
        path: |
          reports/test_results/performance_report.json
          reports/test_results/automated_test_results.json
          
  accessibility-check:
    name: ‚ôø Accessibility Check
    runs-on: ubuntu-latest
    needs: enhanced-testing
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install accessibility tools
      run: |
        python -m pip install --upgrade pip
        pip install axe-selenium-python
        
    - name: üîç Check accessibility features
      run: |
        echo "## ‚ôø Accessibility Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for ARIA labels
        if grep -q "aria-label" src/index.html; then
          echo "‚úÖ ARIA labels found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå No ARIA labels found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for roles
        if grep -q "role=" src/index.html; then
          echo "‚úÖ HTML roles defined" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå No HTML roles defined" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for tabindex
        if grep -q "tabindex=" src/index.html; then
          echo "‚úÖ Tabindex attributes found" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå No tabindex attributes found" >> $GITHUB_STEP_SUMMARY
        fi
        
  quality-gate:
    name: üö™ Quality Gate
    runs-on: ubuntu-latest
    needs: [enhanced-testing, security-scan, performance-analysis, accessibility-check]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Quality assessment
      run: |
        echo "## üö™ Quality Gate Assessment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "automated_test_results.json" ]; then
          STATUS=$(jq -r '.overall_status' automated_test_results.json)
          SUCCESS_RATE=$(jq -r '.summary.success_rate' automated_test_results.json)
          SECURITY_SCORE=$(jq -r '.summary.security_score' automated_test_results.json)
          
          echo "### üìä Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall Status**: $STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: ${SUCCESS_RATE}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Score**: ${SECURITY_SCORE}/100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quality gate criteria
          if [ "$STATUS" = "PASSED" ] || [ "$STATUS" = "WARNING" ]; then
            if [ "$SUCCESS_RATE" -ge 85 ] && [ "$SECURITY_SCORE" -ge 70 ]; then
              echo "üéâ **QUALITY GATE PASSED** - Code meets quality standards!" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Ready for deployment" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è **QUALITY GATE WARNING** - Some criteria not met" >> $GITHUB_STEP_SUMMARY
              echo "üîç Review required before deployment" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå **QUALITY GATE FAILED** - Code does not meet quality standards!" >> $GITHUB_STEP_SUMMARY
            echo "üö´ Deployment blocked" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        fi
        
    - name: üìß Notify team (optional)
      if: always()
      run: |
        echo "Quality gate assessment completed"
        # Add notification logic here (Slack, Teams, email, etc.)
        
  deploy:
    name: üöÄ Deploy (Main Branch Only)
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üåê Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "This is where you would add your deployment logic"
        echo "Examples:"
        echo "- Deploy to Vercel/Netlify"
        echo "- Deploy to AWS S3"
        echo "- Deploy to custom server"
        
    - name: üìß Deployment notification
      run: |
        echo "‚úÖ Deployment completed successfully!"
        # Add deployment notification logic here
